'From Pharo9.0.0 of 20 April 2021 [Build information: Pharo-9.0.0+build.1341.sha.c5160f448a06a72dbe93cf4a53f2ae44bd0b436c (64 Bit)] on 14 May 2021 at 11:57:56.999486 am'!Object subclass: #MolMenu	instanceVariableNames: 'label items parentMenu component icon showComponent'	classVariableNames: ''	package: 'Molecule-IDE-Incubators-Menus'!!MolMenu commentStamp: 'LisaDoyen 4/30/2021 11:33' prior: 0!class for menu when you right click on a component!!MolMenu methodsFor: '*Morphic-Base' stamp: 'LisaDoyen 4/29/2021 15:01'!morphClass	^ MenuMorph! !!MolMenu methodsFor: '*Morphic-Base' stamp: 'LisaDoyen 4/29/2021 15:01'!buildWith: aBuilder	^ self asMenuMorph! !!MolMenu methodsFor: '*Morphic-Base' stamp: 'LisaDoyen 4/29/2021 15:01'!asMenuMorph	^ self asMenuMorphOfKind: self morphClass! !!MolMenu methodsFor: '*Morphic-Base' stamp: 'LisaDoyen 4/29/2021 16:08'!asMenuMorphOfKind: aMorphClass	| prior menu myitems |	prior := parentMenu.	parentMenu := menu := aMorphClass new.	self label ifNotNil: [ 		"parentMenu buildTitle: [ :titleMorph | 			titleMorph bigTitle: self label ; icon: self theme icons alertIcon.		]"	].	myitems := self items.	myitems do: [ :each | each asMenuItemMorphFrom: parentMenu isLast: each = myitems last ].	parentMenu := prior.	^ menu! !!MolMenu methodsFor: 'as yet unclassified' stamp: 'LisaDoyen 4/29/2021 17:17'!selectedComponent	^component ! !!MolMenu methodsFor: 'as yet unclassified' stamp: 'LisaDoyen 4/29/2021 17:16'!selectedComponent: anObject	component := anObject! !!MolMenu methodsFor: 'construction' stamp: 'LisaDoyen 4/29/2021 15:01'!addMenuItem	| item |	item := self newMenuItem.	self items add: item.	^item! !!MolMenu methodsFor: 'construction' stamp: 'LisaDoyen 4/29/2021 15:01'!addSeparator	self items isEmpty		ifTrue: [ ^ nil ].	self items last separator: true! !!MolMenu methodsFor: 'construction' stamp: 'LisaDoyen 4/29/2021 15:01'!newMenuItem	^ PluggableMenuItemSpec new! !!MolMenu methodsFor: 'construction' stamp: 'LisaDoyen 4/29/2021 16:26'!add: aString action: aMessageSend icon: aForm	| item |	item := self addMenuItem.	item label: aString translated.	item action: aMessageSend.	item icon: aForm .	^item! !!MolMenu methodsFor: 'accessing' stamp: 'LisaDoyen 5/10/2021 17:05'!showComponent	^showComponent! !!MolMenu methodsFor: 'accessing' stamp: 'LisaDoyen 4/29/2021 15:01'!label	^ label! !!MolMenu methodsFor: 'accessing' stamp: 'LisaDoyen 4/30/2021 11:24'!icon	"Answer a form with an icon to represent the receiver"	^ self valueOfProperty: #icon! !!MolMenu methodsFor: 'accessing' stamp: 'LisaDoyen 4/29/2021 15:01'!items	^ items ifNil: [ items := OrderedCollection new ]! !!MolMenu methodsFor: 'accessing' stamp: 'LisaDoyen 4/29/2021 15:01'!label: aString	label := aString.! !!MolMenu methodsFor: 'accessing' stamp: 'LisaDoyen 4/30/2021 11:21'!icon: aForm	icon := aForm! !!MolMenu methodsFor: 'protocol' stamp: 'LisaDoyen 5/14/2021 11:22'!open: menu	menu		add: 'System Browser'		action: (MessageSend receiver: [  component browse ]  selector: #value)		icon: (self iconNamed: 'nautilus').	menu		add: 'Info Tools Component'		action: (MessageSend receiver: 		[  | spInfo |			spInfo := SpMolInfoTools new.			spInfo list: component.			spInfo openWithSpec. ]  selector: #value)		icon: (self iconNamed: 'smallInfo').	menu		add: 'Inspect the Component'		action: (MessageSend receiver: [  component inspect ]  selector: #value)		icon: (self iconNamed: 'glamorousInspect').	menu 			addSeparator.	menu		add: 'Show the Component'		action: (MessageSend receiver: [ 			| usedComponentServices usedComponentParameters consumedComponentEvents providedComponentServices			providedComponentParameters producedComponentEvents | 			showComponent := SpMolShowComponent new. 			(component == MolAbstractComponentImpl) | (component ==MolTestComponentImplA) | 			(component == MolTestComponentImplB) | (component == MolTestComponentImplC)				ifFalse:[			usedComponentServices := OrderedCollection new.			component usedComponentServices do: [:compo| compo users do: [:comp | comp == comp ifTrue:[ usedComponentServices add: comp ]]].						showComponent providedServices: component.			showComponent usedServices: component.			showComponent consumedEvents: component.			showComponent producedEvents: component.			showComponent providedParameters: component.			showComponent usedParameters: component."			"usedComponentParameters := OrderedCollection new.			component usedComponentParameters do: [:compo| compo users do: [:comp | usedComponentParameters add: comp]].			consumedComponentEvents := OrderedCollection new.			component consumedComponentEvents do: [:compo| compo users do: [:comp | consumedComponentEvents add: comp]].			providedComponentServices := OrderedCollection new.			component providedComponentServices do: [:compo| compo users do: [:comp | providedComponentServices add: comp]].			providedComponentParameters := OrderedCollection new.			component providedComponentParameters do: [:compo| compo users do: [:comp | providedComponentParameters add: comp]].			producedComponentEvents := OrderedCollection new.			component producedComponentEvents do: [:compo| compo users do: [:comp | producedComponentEvents add: comp]].						showComponent usedComponentServicesConnected: usedComponentServices.			showComponent usedComponentParametersConnected: usedComponentParameters.			showComponent providedComponentServicesConnected: providedComponentServices.			showComponent providedComponentParametersConnected: providedComponentParameters.			showComponent producedComponentEventsConnected: producedComponentEvents.			showComponent consumedComponentEventsConnected: consumedComponentEvents.						showComponent component: component.			showComponent openWithSpec				].			]  selector: #value)		icon: (self iconNamed: 'objects').	menu		add: 'Show UML Class'		action: (MessageSend receiver: 		[  | builder |			builder := RSUMLClassBuilder new.			builder classes: {component}.			builder build.			builder canvas open ]  selector: #value)		icon: (self iconNamed: 'hierarchy').			menu asMenuMorph popUpInWorld! !!MolMenu methodsFor: '*Spec-Core' stamp: 'LisaDoyen 4/29/2021 15:01'!addToMenuModel: aMenuModel	| groups tmp |		groups := OrderedCollection new.	self label ifNotNil: [ aMenuModel title: self label ]. "only change the title when a new one is specified"		tmp := OrderedCollection new.	self items do: [ :each | 		tmp add: each.		each separator			ifTrue: [ 				groups add: tmp copy.				tmp removeAll ] ].	tmp ifNotEmpty: [ groups add: tmp copy ].		groups do: [ :each | aMenuModel 		addGroup: [ :group | each do: [ :spec | 			group addItem: [ :item | item fromSpec: spec ] ] ] ]! !!MolMenu methodsFor: '*Morphic-Widgets-Menubar' stamp: 'LisaDoyen 4/29/2021 15:01'!asMenubarMenuMorph	^ (self asMenuMorphOfKind: MenubarMenuMorph)		layoutItems;		yourself! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MolMenu class	instanceVariableNames: ''!!MolMenu class methodsFor: 'instance creation' stamp: 'LisaDoyen 4/29/2021 15:01'!withModel: aModel	^ self new model: aModel! !